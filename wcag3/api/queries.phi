<?php
require_once "_db_connect.phi";

const QUERY_ITEMS = "select items.item_key, item_id, handle, item, description, types.type_id, types.type_key from items join item_types on items.item_key = item_types.item_key join types on item_types.type_key = types.type_key";
const QUERY_TYPES = "select type_key, type_id, type from types";
const QUERY_ITEMS_FROM_HIERARCHY = "select item_key, type_key from (select hierarchy.item_key, items.item_id, hierarchy.type_key, types.type_id, hierarchy.parent_item_key, parent_items.item_id as parent_item_id, hierarchy.parent_type_key, parent_types.type_id as parent_type_id from hierarchy join items on hierarchy.item_key = items.item_key join types on hierarchy.type_key = types.type_key join items as parent_items on hierarchy.parent_item_key = parent_items.item_key join types as parent_types on hierarchy.parent_type_key = parent_types.type_key) as hierarchy_expanded";

function dataToArray() {
	return queryTypes(array("type_id"=>array("functional-ability")), null, 5);
}

function queryTypes($ands, $ors, $depth = 0) {
	$result = null;
	$sth = constructQuery(QUERY_TYPES, $ands, $ors);
	
	while ($row = $sth->fetch(PDO::FETCH_ASSOC)) {
		if ($depth > 0) {
			$row["items"] = queryItems(array("type_id"=>$row["type_id"]), null, $depth -1);
		}
		$result[] = $row;
	}
	return $result;
}

function queryItems($ands, $ors, $depth = 0) {
	$result = null;
	$sth = constructQuery(QUERY_ITEMS, $ands, $ors);
	
	while ($row = $sth->fetch(PDO::FETCH_ASSOC)) {
		if ($depth > 0) {
			$row["types"] = queryChildTypes($row["item_key"], $row["type_key"], $depth -1);
		}
		$result[] = $row;
	}
	return $result;
}

function queryChildTypes($parent_item_key, $parent_type_key, $depth = 0) {
	$result = null;
	$sth = constructQuery(QUERY_ITEMS_FROM_HIERARCHY, array("parent_item_key"=>$parent_item_key, "parent_type_key"=>$parent_type_key));
	$types = constructQuery(QUERY_TYPES, array("type_key"=>array_unique(colToArray($sth, "type_key"))));
	
	while ($row = $types->fetch(PDO::FETCH_ASSOC)) {
		if ($depth > 0) {
			$row["items"] = queryChildItems($parent_item_key, $parent_type_key, $row["type_key"], $depth -1);
		}
		$result[] = $row;
	}
	return $result;
}

function queryChildItems($parent_item_key, $parent_type_key, $type_key, $depth = 0) {
	$result = null;
	$sth = constructQuery(QUERY_ITEMS_FROM_HIERARCHY, array("parent_item_key"=>$parent_item_key, "parent_type_key"=>$parent_type_key, "type_key"=>$type_key));
	$items = constructQuery(QUERY_ITEMS, array("items.item_key"=>colToArray($sth, "item_key")));
	
	while ($row = $items->fetch(PDO::FETCH_ASSOC)) {
		if ($depth > 0) {
			$row["types"] = queryChildTypes($row["item_key"], $row["type_key"], $depth -1);
		}
		$result[] = $row;
	}
	return $result;
}

// construct a query using a starting sql statement and arrays of "and" and "or" restrictions,
// create a PDOStatement, bind values, execute, and return the PDOStatement
// $ands and $ors are associative arrays whose keys are the parameter to filter on, and values are the values
// values can be arrays themselves if needing to filter on multiple values of the same parameter (in or relationship with each other)
function constructQuery($base, $ands = null, $ors = null) {
	global $dbh;
	
	//check that "and" and "or" parameters are arrays
	if (!is_null($ands) and !is_array($ands)) print ("parameter \"ands\" must be an array");
	if (!is_null($ors) and !is_array($ors)) print ("parameter \"ors\" must be an array");
	
	// start a where clause
	$sql = $base;
	if (!is_null($ands) or !is_null($ors)) $sql .= " where";

	// put in sql "and" statements
	if (!is_null($ands)) {
		$i = 0;
		foreach($ands as $key => $val) {
			if ($i > 0) $sql .= " and";
			$val = paramArray($val);
			$sql .= " (";
			$j = 0;
			foreach($val as $innerval) {
				if ($j > 0) $sql .= " or";
				$sql .= " " . $key . " = ?";
				$j++;
			}
			$sql .= ")";
			$i++;
		}
	}
	
	// join "and" and "or" if needed
	if (!is_null($ands) and !is_null($ors)) $sql .= " and";
	
	// put in sql "or" statements
	if (!is_null($ors)) {
		$sql .= "(";
		$i = 0;
		foreach($ors as $key => $val) {
			if ($i > 0) $sql .= " or";
			$val = paramArray($val);
			$sql .= " (";
			$j = 0;
			foreach($val as $innerval) {
				if ($j > 0) $sql .= " or";
				$sql .= " " . $key . " = ?";
				$j++;
			}
			$sql .= ")";
			$i++;
		}
		$sql .= ")";
	}
	
	// debugging
	$debugging = false;

	if ($debugging) {
		print $sql . "\n";
		if (!is_null($ands)) {
			print "Ands: ";
			foreach($ands as $key => $val) {
				print $key . "=";
				if (is_array($val)) foreach ($val as $val2) print $val2 . " ";
				else print $val;
				print (", ");
			}
			print "\n";
		}
		if (!is_null($ors)) {
			print "Ors: ";
			foreach($ors as $key => $val) {
				print $key . "=";
				if (is_array($val)) foreach ($val as $val2) print $val2 . " ";
				else print $val;
				print (", ");
			}
			print "\n";
		}
		print "\n";
	}
	
	// initialize PDO statement
	$sth = $dbh->prepare($sql);
	
	$i = 1;

	// bind "and" values
	if (!is_null($ands)) {
		foreach ($ands as $val) {
			$val = paramArray($val);
			foreach($val as $innerval) {
				$sth->bindValue($i, $innerval);
				$i++;
			}
		}
	}

	// bind "or" values
	if (!is_null($ors)) {
		foreach ($ors as $val) {
			$val = paramArray($val);
			foreach($val as $innerval) {
				$sth->bindValue($i, $innerval);
				$i++;
			}
		}
	}
	
	$sth->execute();
	
	return $sth;
}

// ensure a parameter is an array
function paramArray($val) {
	if (is_array($val)) return $val;
	else return array($val);
}

// get the values of a query column as an array
function colToArray($sth, $colname) {
	$col = null;
	while ($row = $sth->fetch()) {
		$col[] = $row[$colname];
	}
	return $col;
}
?>